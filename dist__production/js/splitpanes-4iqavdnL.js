import{ah as e,o as i,c as t,I as s,K as n}from"./@vue-5amejw8K.js";const a={name:"splitpanes",emits:["ready","resize","resized","pane-click","pane-maximize","pane-add","pane-remove","splitter-click"],props:{horizontal:{type:Boolean},pushOtherPanes:{type:Boolean,default:!0},dblClickSplitter:{type:Boolean,default:!0},rtl:{type:Boolean,default:!1},firstSplitter:{type:Boolean}},provide(){return{requestUpdate:this.requestUpdate,onPaneAdd:this.onPaneAdd,onPaneRemove:this.onPaneRemove,onPaneClick:this.onPaneClick}},data:()=>({container:null,ready:!1,panes:[],touch:{mouseDown:!1,dragging:!1,activeSplitter:null},splitterTaps:{splitter:null,timeoutId:null}}),computed:{panesCount(){return this.panes.length},indexedPanes(){return this.panes.reduce(((e,i)=>(e[i.id]=i)&&e),{})}},methods:{updatePaneComponents(){this.panes.forEach((e=>{e.update&&e.update({[this.horizontal?"height":"width"]:`${this.indexedPanes[e.id].size}%`})}))},bindEvents(){document.addEventListener("mousemove",this.onMouseMove,{passive:!1}),document.addEventListener("mouseup",this.onMouseUp),"ontouchstart"in window&&(document.addEventListener("touchmove",this.onMouseMove,{passive:!1}),document.addEventListener("touchend",this.onMouseUp))},unbindEvents(){document.removeEventListener("mousemove",this.onMouseMove,{passive:!1}),document.removeEventListener("mouseup",this.onMouseUp),"ontouchstart"in window&&(document.removeEventListener("touchmove",this.onMouseMove,{passive:!1}),document.removeEventListener("touchend",this.onMouseUp))},onMouseDown(e,i){this.bindEvents(),this.touch.mouseDown=!0,this.touch.activeSplitter=i},onMouseMove(e){this.touch.mouseDown&&(e.preventDefault(),this.touch.dragging=!0,this.calculatePanesSize(this.getCurrentMouseDrag(e)),this.$emit("resize",this.panes.map((e=>({min:e.min,max:e.max,size:e.size})))))},onMouseUp(){this.touch.dragging&&this.$emit("resized",this.panes.map((e=>({min:e.min,max:e.max,size:e.size})))),this.touch.mouseDown=!1,setTimeout((()=>{this.touch.dragging=!1,this.unbindEvents()}),100)},onSplitterClick(e,i){"ontouchstart"in window&&(e.preventDefault(),this.dblClickSplitter&&(this.splitterTaps.splitter===i?(clearTimeout(this.splitterTaps.timeoutId),this.splitterTaps.timeoutId=null,this.onSplitterDblClick(e,i),this.splitterTaps.splitter=null):(this.splitterTaps.splitter=i,this.splitterTaps.timeoutId=setTimeout((()=>{this.splitterTaps.splitter=null}),500)))),this.touch.dragging||this.$emit("splitter-click",this.panes[i])},onSplitterDblClick(e,i){let t=0;this.panes=this.panes.map(((e,s)=>(e.size=s===i?e.max:e.min,s!==i&&(t+=e.min),e))),this.panes[i].size-=t,this.$emit("pane-maximize",this.panes[i]),this.$emit("resized",this.panes.map((e=>({min:e.min,max:e.max,size:e.size}))))},onPaneClick(e,i){this.$emit("pane-click",this.indexedPanes[i])},getCurrentMouseDrag(e){const i=this.container.getBoundingClientRect(),{clientX:t,clientY:s}="ontouchstart"in window&&e.touches?e.touches[0]:e;return{x:t-i.left,y:s-i.top}},getCurrentDragPercentage(e){e=e[this.horizontal?"y":"x"];const i=this.container[this.horizontal?"clientHeight":"clientWidth"];return this.rtl&&!this.horizontal&&(e=i-e),100*e/i},calculatePanesSize(e){const i=this.touch.activeSplitter;let t={prevPanesSize:this.sumPrevPanesSize(i),nextPanesSize:this.sumNextPanesSize(i),prevReachedMinPanes:0,nextReachedMinPanes:0};const s=0+(this.pushOtherPanes?0:t.prevPanesSize),n=100-(this.pushOtherPanes?0:t.nextPanesSize),a=Math.max(Math.min(this.getCurrentDragPercentage(e),n),s);let h=[i,i+1],o=this.panes[h[0]]||null,r=this.panes[h[1]]||null;const p=o.max<100&&a>=o.max+t.prevPanesSize,d=r.max<100&&a<=100-(r.max+this.sumNextPanesSize(i+1));if(p||d)p?(o.size=o.max,r.size=Math.max(100-o.max-t.prevPanesSize-t.nextPanesSize,0)):(o.size=Math.max(100-r.max-t.prevPanesSize-this.sumNextPanesSize(i+1),0),r.size=r.max);else{if(this.pushOtherPanes){const e=this.doPushOtherPanes(t,a);if(!e)return;({sums:t,panesToResize:h}=e),o=this.panes[h[0]]||null,r=this.panes[h[1]]||null}null!==o&&(o.size=Math.min(Math.max(a-t.prevPanesSize-t.prevReachedMinPanes,o.min),o.max)),null!==r&&(r.size=Math.min(Math.max(100-a-t.nextPanesSize-t.nextReachedMinPanes,r.min),r.max))}},doPushOtherPanes(e,i){const t=this.touch.activeSplitter,s=[t,t+1];return i<e.prevPanesSize+this.panes[s[0]].min&&(s[0]=this.findPrevExpandedPane(t).index,e.prevReachedMinPanes=0,s[0]<t&&this.panes.forEach(((i,n)=>{n>s[0]&&n<=t&&(i.size=i.min,e.prevReachedMinPanes+=i.min)})),e.prevPanesSize=this.sumPrevPanesSize(s[0]),void 0===s[0])?(e.prevReachedMinPanes=0,this.panes[0].size=this.panes[0].min,this.panes.forEach(((i,s)=>{s>0&&s<=t&&(i.size=i.min,e.prevReachedMinPanes+=i.min)})),this.panes[s[1]].size=100-e.prevReachedMinPanes-this.panes[0].min-e.prevPanesSize-e.nextPanesSize,null):i>100-e.nextPanesSize-this.panes[s[1]].min&&(s[1]=this.findNextExpandedPane(t).index,e.nextReachedMinPanes=0,s[1]>t+1&&this.panes.forEach(((i,n)=>{n>t&&n<s[1]&&(i.size=i.min,e.nextReachedMinPanes+=i.min)})),e.nextPanesSize=this.sumNextPanesSize(s[1]-1),void 0===s[1])?(e.nextReachedMinPanes=0,this.panes[this.panesCount-1].size=this.panes[this.panesCount-1].min,this.panes.forEach(((i,s)=>{s<this.panesCount-1&&s>=t+1&&(i.size=i.min,e.nextReachedMinPanes+=i.min)})),this.panes[s[0]].size=100-e.prevPanesSize-e.nextReachedMinPanes-this.panes[this.panesCount-1].min-e.nextPanesSize,null):{sums:e,panesToResize:s}},sumPrevPanesSize(e){return this.panes.reduce(((i,t,s)=>i+(s<e?t.size:0)),0)},sumNextPanesSize(e){return this.panes.reduce(((i,t,s)=>i+(s>e+1?t.size:0)),0)},findPrevExpandedPane(e){return[...this.panes].reverse().find((i=>i.index<e&&i.size>i.min))||{}},findNextExpandedPane(e){return this.panes.find((i=>i.index>e+1&&i.size>i.min))||{}},checkSplitpanesNodes(){Array.from(this.container.children).forEach((e=>{const i=e.classList.contains("splitpanes__pane"),t=e.classList.contains("splitpanes__splitter");!i&&!t&&e.parentNode.removeChild(e)}))},addSplitter(e,i,t=!1){const s=e-1,n=document.createElement("div");n.classList.add("splitpanes__splitter"),t||(n.onmousedown=e=>this.onMouseDown(e,s),typeof window<"u"&&"ontouchstart"in window&&(n.ontouchstart=e=>this.onMouseDown(e,s)),n.onclick=e=>this.onSplitterClick(e,s+1)),this.dblClickSplitter&&(n.ondblclick=e=>this.onSplitterDblClick(e,s+1)),i.parentNode.insertBefore(n,i)},removeSplitter(e){e.onmousedown=void 0,e.onclick=void 0,e.ondblclick=void 0,e.parentNode.removeChild(e)},redoSplitters(){const e=Array.from(this.container.children);e.forEach((e=>{e.className.includes("splitpanes__splitter")&&this.removeSplitter(e)}));let i=0;e.forEach((e=>{e.className.includes("splitpanes__pane")&&(!i&&this.firstSplitter?this.addSplitter(i,e,!0):i&&this.addSplitter(i,e),i++)}))},requestUpdate({target:e,...i}){const t=this.indexedPanes[e._.uid];Object.entries(i).forEach((([e,i])=>t[e]=i))},onPaneAdd(e){let i=-1;Array.from(e.$el.parentNode.children).some((t=>(t.className.includes("splitpanes__pane")&&i++,t===e.$el)));const t=parseFloat(e.minSize),s=parseFloat(e.maxSize);this.panes.splice(i,0,{id:e._.uid,index:i,min:isNaN(t)?0:t,max:isNaN(s)?100:s,size:null===e.size?null:parseFloat(e.size),givenSize:e.size,update:e.update}),this.panes.forEach(((e,i)=>e.index=i)),this.ready&&this.$nextTick((()=>{this.redoSplitters(),this.resetPaneSizes({addedPane:this.panes[i]}),this.$emit("pane-add",{index:i,panes:this.panes.map((e=>({min:e.min,max:e.max,size:e.size})))})}))},onPaneRemove(e){const i=this.panes.findIndex((i=>i.id===e._.uid)),t=this.panes.splice(i,1)[0];this.panes.forEach(((e,i)=>e.index=i)),this.$nextTick((()=>{this.redoSplitters(),this.resetPaneSizes({removedPane:{...t,index:i}}),this.$emit("pane-remove",{removed:t,panes:this.panes.map((e=>({min:e.min,max:e.max,size:e.size})))})}))},resetPaneSizes(e={}){e.addedPane||e.removedPane?this.panes.some((e=>null!==e.givenSize||e.min||e.max<100))?this.equalizeAfterAddOrRemove(e):this.equalize():this.initialPanesSizing(),this.ready&&this.$emit("resized",this.panes.map((e=>({min:e.min,max:e.max,size:e.size}))))},equalize(){const e=100/this.panesCount;let i=0;const t=[],s=[];this.panes.forEach((n=>{n.size=Math.max(Math.min(e,n.max),n.min),i-=n.size,n.size>=n.max&&t.push(n.id),n.size<=n.min&&s.push(n.id)})),i>.1&&this.readjustSizes(i,t,s)},initialPanesSizing(){let e=100;const i=[],t=[];let s=0;this.panes.forEach((n=>{e-=n.size,null!==n.size&&s++,n.size>=n.max&&i.push(n.id),n.size<=n.min&&t.push(n.id)}));let n=100;e>.1&&(this.panes.forEach((i=>{null===i.size&&(i.size=Math.max(Math.min(e/(this.panesCount-s),i.max),i.min)),n-=i.size})),n>.1&&this.readjustSizes(e,i,t))},equalizeAfterAddOrRemove({addedPane:e,removedPane:i}={}){let t=100/this.panesCount,s=0;const n=[],a=[];e&&null!==e.givenSize&&(t=(100-e.givenSize)/(this.panesCount-1)),this.panes.forEach((e=>{s-=e.size,e.size>=e.max&&n.push(e.id),e.size<=e.min&&a.push(e.id)})),!(Math.abs(s)<.1)&&(this.panes.forEach((i=>{e&&null!==e.givenSize&&e.id===i.id||(i.size=Math.max(Math.min(t,i.max),i.min)),s-=i.size,i.size>=i.max&&n.push(i.id),i.size<=i.min&&a.push(i.id)})),s>.1&&this.readjustSizes(s,n,a))},readjustSizes(e,i,t){let s;s=e>0?e/(this.panesCount-i.length):e/(this.panesCount-t.length),this.panes.forEach(((n,a)=>{if(e>0&&!i.includes(n.id)){const i=Math.max(Math.min(n.size+s,n.max),n.min),t=i-n.size;e-=t,n.size=i}else if(!t.includes(n.id)){const i=Math.max(Math.min(n.size+s,n.max),n.min),t=i-n.size;e-=t,n.size=i}n.update({[this.horizontal?"height":"width"]:`${this.indexedPanes[n.id].size}%`})})),Math.abs(e)>.1&&this.$nextTick((()=>{this.ready}))}},watch:{panes:{deep:!0,immediate:!1,handler(){this.updatePaneComponents()}},horizontal(){this.updatePaneComponents()},firstSplitter(){this.redoSplitters()},dblClickSplitter(e){[...this.container.querySelectorAll(".splitpanes__splitter")].forEach(((i,t)=>{i.ondblclick=e?e=>this.onSplitterDblClick(e,t):void 0}))}},beforeUnmount(){this.ready=!1},mounted(){this.container=this.$refs.container,this.checkSplitpanesNodes(),this.redoSplitters(),this.resetPaneSizes(),this.$emit("ready"),this.ready=!0},render(){return e("div",{ref:"container",class:["splitpanes","splitpanes--"+(this.horizontal?"horizontal":"vertical"),{"splitpanes--dragging":this.touch.dragging}]},this.$slots.default())}};const h=((e,i)=>{const t=e.__vccOpts||e;for(const[s,n]of i)t[s]=n;return t})({name:"pane",inject:["requestUpdate","onPaneAdd","onPaneRemove","onPaneClick"],props:{size:{type:[Number,String],default:null},minSize:{type:[Number,String],default:0},maxSize:{type:[Number,String],default:100}},data:()=>({style:{}}),mounted(){this.onPaneAdd(this)},beforeUnmount(){this.onPaneRemove(this)},methods:{update(e){this.style=e}},computed:{sizeNumber(){return this.size||0===this.size?parseFloat(this.size):null},minSizeNumber(){return parseFloat(this.minSize)},maxSizeNumber(){return parseFloat(this.maxSize)}},watch:{sizeNumber(e){this.requestUpdate({target:this,size:e})},minSizeNumber(e){this.requestUpdate({target:this,min:e})},maxSizeNumber(e){this.requestUpdate({target:this,max:e})}}},[["render",function(e,a,h,o,r,p){return i(),t("div",{class:"splitpanes__pane",onClick:a[0]||(a[0]=i=>p.onPaneClick(i,e._.uid)),style:n(e.style)},[s(e.$slots,"default")],4)}]]);export{a as M,h as g};
